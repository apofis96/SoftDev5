//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ManagerServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ManagerServiceReference.IManagerService")]
    public interface IManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerService/TestConnection", ReplyAction="http://tempuri.org/IManagerService/TestConnectionResponse")]
        void TestConnection(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerService/TestConnection", ReplyAction="http://tempuri.org/IManagerService/TestConnectionResponse")]
        System.Threading.Tasks.Task TestConnectionAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerService/CompileOrder", ReplyAction="http://tempuri.org/IManagerService/CompileOrderResponse")]
        bool CompileOrder(string name, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerService/CompileOrder", ReplyAction="http://tempuri.org/IManagerService/CompileOrderResponse")]
        System.Threading.Tasks.Task<bool> CompileOrderAsync(string name, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerService/RequestDispatching", ReplyAction="http://tempuri.org/IManagerService/RequestDispatchingResponse")]
        void RequestDispatching(string name, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerService/RequestDispatching", ReplyAction="http://tempuri.org/IManagerService/RequestDispatchingResponse")]
        System.Threading.Tasks.Task RequestDispatchingAsync(string name, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerService/RequestReceiving", ReplyAction="http://tempuri.org/IManagerService/RequestReceivingResponse")]
        void RequestReceiving();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerService/RequestReceiving", ReplyAction="http://tempuri.org/IManagerService/RequestReceivingResponse")]
        System.Threading.Tasks.Task RequestReceivingAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IManagerServiceChannel : Client.ManagerServiceReference.IManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ManagerServiceClient : System.ServiceModel.ClientBase<Client.ManagerServiceReference.IManagerService>, Client.ManagerServiceReference.IManagerService {
        
        public ManagerServiceClient() {
        }
        
        public ManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void TestConnection(string str) {
            base.Channel.TestConnection(str);
        }
        
        public System.Threading.Tasks.Task TestConnectionAsync(string str) {
            return base.Channel.TestConnectionAsync(str);
        }
        
        public bool CompileOrder(string name, int amount) {
            return base.Channel.CompileOrder(name, amount);
        }
        
        public System.Threading.Tasks.Task<bool> CompileOrderAsync(string name, int amount) {
            return base.Channel.CompileOrderAsync(name, amount);
        }
        
        public void RequestDispatching(string name, int amount) {
            base.Channel.RequestDispatching(name, amount);
        }
        
        public System.Threading.Tasks.Task RequestDispatchingAsync(string name, int amount) {
            return base.Channel.RequestDispatchingAsync(name, amount);
        }
        
        public void RequestReceiving() {
            base.Channel.RequestReceiving();
        }
        
        public System.Threading.Tasks.Task RequestReceivingAsync() {
            return base.Channel.RequestReceivingAsync();
        }
    }
}
